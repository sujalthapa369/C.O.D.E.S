class Solution {
public:
    int countIslands(vector<vector<int>>& grid, int k) {
    int m = grid.size();
    if (m == 0) return 0;
    int n = grid[0].size();

    vector<vector<bool>> visited(m, vector<bool>(n, false));
    int count = 0;

    function<void(int, int, long long&)> dfs = [&](int i, int j, long long& sum) {
        if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0 || visited[i][j])
            return;
        visited[i][j] = true;
        sum += grid[i][j];
        dfs(i + 1, j, sum);
        dfs(i - 1, j, sum);
        dfs(i, j + 1, sum);
        dfs(i, j - 1, sum);
    };

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (grid[i][j] != 0 && !visited[i][j]) {
                long long sum = 0;
                dfs(i, j, sum);
                if (sum % k == 0) count++;
            }
        }
    }

    return count;
}
};
